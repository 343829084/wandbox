function Editor(id, settings_id) {
  this.id = id;
  this.settings_id = settings_id;

  // not initialized
  if ($(this.id).children().size() == 0) {
    this._initialize();
  }
}

Editor.prototype._initialize = function() {
  var self = this;

  $(this.id).append('<div class="smart-editor"></div>');
  $(this.id).append('<textarea class="span12 legacy-editor"></textarea>');

  var codemirror = CodeMirror($(this.id + ' .smart-editor')[0], {
    lineNumbers: true,
    theme: 'user',
    indentUnit: 4,
    extraKeys: {
      'Ctrl-Enter': function() {
        if (self.onrun)
          self.onrun(editor);
      },
      Tab: function(cm) {
        var cursor = cm.getCursor()['ch'];
        var indentUnit = cm.getOption("indentUnit");
        var newCursor = Math.floor((cursor + indentUnit) / indentUnit) * indentUnit
        var indentNum = newCursor - cursor;
        var spaces = Array(indentNum + 1).join(" ");
        cm.replaceSelection(spaces, "end", "+input");
      },
    },
  });
  $(this.id).find('.smart-editor').data('editor', codemirror);

  var editor = this.smart_editor()

  $(this.settings_id).find('select').change(function() {
    var value = $(this).val();
    editor.setOption('keyMap', value);
    if (self.editor_changed)
      self.editor_changed();
  }).change();
  $(this.settings_id).find('input').change(function() {
    var val = self.getValue();
    var checked = $(this).attr('checked');
    if (checked) {
      $(this.id + ' .smart-editor').hide();
      $(this.id + ' .legacy-editor').show();
    } else {
      $(this.id + ' .smart-editor').show();
      $(this.id + ' .legacy-editor').hide();
    }
    self.setValue(val);
    self.focus();
    if (checked) {
      $(self.settings_id).find('select').attr('disabled', 'disabled');
    } else {
      $(self.settings_id).find('select').removeAttr('disabled');
    }
    if (self.editor_changed)
      self.editor_changed();
  });
  $(this.id + ' .legacy-editor').hide();
}

Editor.prototype.is_legacy = function() {
  return $(this.id + ' .smart-editor').css('display') == 'none';
}
Editor.prototype.smart_editor = function() {
  return $(this.id).find('.smart-editor').data('editor');
}
Editor.prototype.legacy_editor = function() {
  return $(this.id + ' .legacy-editor');
}
Editor.prototype.editor = function() {
  return this.is_legacy() ? this.legacy_editor() : this.smart_editor();
}

Editor.prototype.focus = function() {
  this.editor().focus();
}

Editor.prototype.getValue = function() {
  return this.is_legacy() ? this.legacy_editor().val() : this.smart_editor().getValue();
}

Editor.prototype.setValue = function(value) {
  if (this.is_legacy()) {
    this.legacy_editor().val(value);
  } else {
    this.smart_editor().setValue(value);
  }
}

var EDITOR_MODE_MAPPING = {
  'C++': 'text/x-c++src',
  'C': 'text/x-csrc',
  'CPP': 'text/x-csrc',
  'D': 'text/x-d',
  'Ruby': 'text/x-ruby',
  'Python': 'text/x-python',
  'Perl': 'text/x-perl',
  'Erlang': 'text/x-erlang',
  'C#': 'text/x-csharp',
  'Haskell': 'text/x-haskell',
  'Bash script': 'text/x-sh',
  'Lua': 'text/x-lua',
  'PHP': 'text/x-php',
  'Lisp': 'text/x-common-lisp',
  'Pascal': 'text/x-pascal',
  'Rust': 'text/x-rustsrc',
}
function _get_editor_mode(lang) {
  return EDITOR_MODE_MAPPING[lang];
}

Editor.prototype.setLanguage = function(lang) {
  this.smart_editor().setOption('mode', _get_editor_mode(lang));
}

Editor.prototype.serialize = function() {
  return {
    keybinding: $(this.settings_id).find('select').val(),
    use_smart_editor: $(this.settings_id).find('input').prop('checked'),
  };
}

Editor.prototype.deserialize = function(settings) {
  var ekey = $(this.settings_id).find('select');
  ekey.val(settings.keybinding);

  var esmart = $(this.settings_id).find('input');
  if (settings.use_smart_editor) {
    esmart.attr('checked', '');
  } else {
    esmart.removeAttr('checked');
  }

  ekey.change();
  esmart.change();
}
