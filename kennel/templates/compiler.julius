
function to_id(id) {
  return id.replace(/\./g, "\\.");
}

function Compiler(compiler_id, compile_options_id) {
  var self = this;

  this.compiler_id = compiler_id;
  this.compile_options_id = compile_options_id;

  $(this.compiler_id).change(function() {
    $(self.compile_options_id).children().removeClass('selected');
    self._compile_options().addClass('selected');

    if (self.compiler_changed)
      self.compiler_changed();
  });
  $(this.compile_options_id + ' input').change(function() {
    if (self.compile_option_changed)
      self.compile_option_changed();
  });
}

Compiler.prototype._compiler = function() {
  return $(this.compiler_id);
}

Compiler.prototype.get_selected_compiler = function() {
  return this._compiler().val();
}

Compiler.prototype.get_selected_compiler_element = function() {
  return $(this.compiler_id + ' > option:selected');
}

Compiler.prototype.set_compiler = function(compiler) {
  this._compiler().val(compiler);
  this._compiler().change();
}

Compiler.prototype._compile_options = function() {
  var compiler = this.get_selected_compiler();
  return $(this.compile_options_id + ' div[compiler=' + to_id(compiler) + ']');
}

Compiler.prototype.get_checked_compile_options = function() {
  var options = this._compile_options();
  return options.find(':checked');
}

Compiler.prototype.deserialize = function(compiler, compile_options) {
  this.set_compiler(compiler);

  var check = function(elem, v) {
    if (elem.attr('type') == 'checkbox') {
      v ? elem.attr('checked', '') : elem.removeAttr('checked');
    } else {
      if (v) elem.click();
    }
  };
  var options = compile_options.split(',');
  var options_map = {};
  for (var i = 0; i < options.length; i++) {
    options_map[options[i]] = '';
  }
  this._compile_options().find('input').each(function() {
    var val = $(this).val();
    check($(this), val in options_map);
  });
}
