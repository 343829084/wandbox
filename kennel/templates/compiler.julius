
function to_id(id) {
  return id.replace(/\./g, "\\.");
}

function Compiler(compiler_id, compile_options_id) {
  var self = this;

  this.compiler_id = compiler_id;
  this.compile_options_id = compile_options_id;

  $(this.compiler_id).change(function() {
    $(self.compile_options_id).children().removeClass('selected');
    self._compile_options().addClass('selected');

    if (self.compiler_changed)
      self.compiler_changed();
  });
  $(this.compile_options_id + ' input').change(function() {
    if (self.compile_option_changed)
      self.compile_option_changed();
  });
  $(this.compile_options_id + ' select').change(function() {
    if (self.compile_option_changed)
      self.compile_option_changed();
  });

  var init_editor = function(es) {
    es.map(function(n,e) {
      if ($(e).children().size() != 0)
        return;

       var editor = CodeMirror(e, {
         viewportMargin: Infinity,
         smartIndent: false,
       });
       $(e).data('editor', editor);
    });
  };
  init_editor($(this.compile_options_id).find('.compiler-option-raw'));
  init_editor($(this.compile_options_id).find('.runtime-option-raw'));

  $(this.compile_options_id).find('.option-raw').keyup(function() {
    if (self.raw_keyup)
      self.raw_keyup();
  });
  $(this.compile_options_id).find('.option-raw').change(function() {
    if (self.raw_changed)
      self.raw_changed();
  });

}

Compiler.prototype._compiler = function() {
  return $(this.compiler_id);
}

Compiler.prototype.get_selected_compiler = function() {
  return this.get_selected_compiler_element().val();
}

Compiler.prototype.get_selected_compiler_element = function() {
  return $(this.compiler_id + ' > :enabled:eq(' + $(this.compiler_id)[0].selectedIndex + ')');
}

Compiler.prototype.set_compiler = function(compiler) {
  this._compiler().val(compiler);
  this._compiler().change();
}

Compiler.prototype._compile_options = function() {
  var compiler = this.get_selected_compiler();
  return $(this.compile_options_id + ' div[data-compiler=' + to_id(compiler) + ']');
}

Compiler.prototype.get_checked_compile_options = function() {
  var options = this._compile_options();
  return options.find(':checked,:selected');
}

Compiler.prototype._selected_option_raw = function(cls, value) {
  var options = this._compile_options();
  var e = options.find(cls);
  if (e.size() == 0)
    return undefined;
  return value ? e.data('editor').setValue(value) : e.data('editor').getValue();
}

Compiler.prototype.get_selected_compiler_option_raw = function() {
  return this._selected_option_raw('.compiler-option-raw');
}
Compiler.prototype.set_selected_compiler_option_raw = function(value) {
  this._selected_option_raw('.compiler-option-raw', value);
}

Compiler.prototype.get_selected_runtime_option_raw = function() {
  return this._selected_option_raw('.runtime-option-raw');
}
Compiler.prototype.set_selected_runtime_option_raw = function(value) {
  this._selected_option_raw('.runtime-option-raw', value);
}

Compiler.prototype.raw_to_arguments = function(raw) {
  if (!raw)
    return [];

  // split by line-break
  var xs = raw.split(/\r\n|\r|\n/);
  // remove last line-break
  if (xs.length != 0 && xs[xs.length - 1].length == 0)
    xs.pop();
  // escape double-quotes and backslash
  xs = $.map(xs, function(x) { return x.replace(/\\|"/g, '\\$&'); });
  // enclose double-quotes
  xs = $.map(xs, function(x) { return '"' + x + '"'; });

  return xs;
}

Compiler.prototype.serialize_current = function() {
  return {
    compiler: this.get_selected_compiler(),
    compile_options: this.get_checked_compile_options().map(function(n,e) { return $(e).val(); }).get().join(','),
    compiler_option_raw: this.get_selected_compiler_option_raw(),
    runtime_option_raw: this.get_selected_runtime_option_raw(),
  };
}

Compiler.prototype.deserialize = function(settings) {
  this.set_compiler(settings.compiler);

  var options = settings.compile_options.split(',');
  var options_map = {};
  for (var i = 0; i < options.length; i++) {
    options_map[options[i]] = '';
  }
  this._compile_options().find('input').each(function() {
    var elem = $(this);
    var val = elem.val();
    var v = val in options_map;
    elem.prop('checked', v);
  });
  this._compile_options().find('select > option').each(function() {
    var elem = $(this);
    var val = elem.val();
    var v = val in options_map;
    if (v)
      elem.parent().val(val);
  });
  this.set_selected_compiler_option_raw(settings.compiler_option_raw);
  this.set_selected_runtime_option_raw(settings.runtime_option_raw);
}

$(function() {
  jQuery.fn.toggleOption = function(show) {
    jQuery(this).toggle(show);
    if (show) {
      if (jQuery(this).parent('span.toggleOption').length != 0)
        jQuery(this).unwrap();
    } else {
      if (jQuery(this).parent('span.toggleOption').length == 0)
        jQuery(this).wrap('<span class="toggleOption" style="display: none;" />');
    }
  };

  $.cookie.json = true;

  var matchedOption = function(option, searchText) {
    var matched = function(str) {
      return str.toLowerCase().indexOf(searchText.toLowerCase()) >= 0;
    };
    if (matched(option.attr('value'))) return true;
    if (matched(option.attr('data-language'))) return true;
    if (matched(option.attr('data-display-name'))) return true;
    return false;
  };
  var changeCandidateList = function(searchText, excepted) {
    var count = 0;
    $('#compiler option').each(function() {
      var option = $(this);
      if (matchedOption(option, searchText) ||
          excepted && option.attr('value') == excepted) {
        option.toggleOption(true);
        count += 1;
      } else {
        option.toggleOption(false);
      }
    });
    $('#compiler').attr('size', count > 5 ? count : 5);
    $('#compiler').change();

    $.cookie('wandbox.compiler.search', { text: searchText }, { expires: 365, path: '/wandbox' });
  };
  $('#typeahead-search').keyup(function() {
    changeCandidateList($(this).val());
  });
  $('#typeahead-search').change(function() {
    changeCandidateList($(this).val());
  });

  var search = $.cookie('wandbox.compiler.search');
  if (search) {
    $('#typeahead-search').val(search.text);
    changeCandidateList($('#typeahead-search').val(), JSON_CODE && JSON_CODE.compiler);
  }

  $('#typeahead-clear').click(function() {
    $('#typeahead-search').val('');
    $('#typeahead-search').change();
  });
});
