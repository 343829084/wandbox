USING_PERMLINK = #{usingPermlink}
JSON_CODE = #{jsonCode};

function decode_uri(str) {
  return decodeURIComponent(str);
}

function post_code(compiler, result_container) {
  $('#compile').hide();
  $('#compiling').show();

  var editor = new Editor('#editor', '#editor-settings');
  var code = editor.getValue();
  var stdin = new Stdin('#stdin');

  result_container.post_code(compiler, code, stdin.get_stdin());
}

function update_compile_command(compiler) {
  var command = compiler.get_selected_compiler_element().attr('data-command');
  var compiler_name = compiler.get_selected_compiler_element().text();
  var compile_options = compiler.get_checked_compile_options().map(function(n,e) { return $(e).attr('data-flags'); });
  var compiler_options_arguments = Compiler.prototype.raw_to_arguments(compiler.get_selected_compiler_option_raw());
  var runtime_options_arguments = Compiler.prototype.raw_to_arguments(compiler.get_selected_runtime_option_raw());

  $('#compiler_name').text(compiler_name);

  var compile_command = '$ ' + command + ' ' + compile_options.get().join(' ') + ' ' + compiler_options_arguments.join(' ') + runtime_options_arguments.join(' ');
  $('#compile_command').html($('<code>').text(compile_command));
}

function save(key, value) {
  $.cookie(key, value, { expires: 365, path: '/wandbox' });
}

$(function() {
  $.cookie.json = true;

  var result_container = new ResultContainer('#result-container', '#result-container-settings')
  result_container.onfinish = function() {
    $('#compile').show();
    $('#compiling').hide();
  };
  result_container.result_changed = function() {
    if (!USING_PERMLINK)
      save('wandbox.result_container', result_container.serialize());
  }

  $('#compile').click(function(event) {
    event.preventDefault();
    post_code(compiler, result_container);
  });
  $('#compiling').hide();

  var editor = new Editor('#editor', '#editor-settings');
  editor.onrun = function() {
    post_code(compiler, result_container);
  };
  editor.editor_changed = function() {
    if (!USING_PERMLINK)
      save('wandbox.editor', editor.serialize());
    if (editor.is_legacy()) {
      $('#compile').text('Run');
    } else {
      $('#compile').text('Run (or Ctrl+Enter)');
    }
  };

  // create compiler
  var compiler = new Compiler('#compiler', '#compile-options');
  compiler.compiler_changed = function() {
    if (!USING_PERMLINK)
      save('wandbox.compiler.current', compiler.serialize_current());

    update_compile_command(compiler);

    var lang = compiler.get_selected_compiler_element().attr('data-language');
    editor.setLanguage(lang);
  };
  compiler.compile_option_changed = function() {
    if (!USING_PERMLINK)
      save('wandbox.compiler.current', compiler.serialize_current());

    update_compile_command(compiler);
  };
  compiler.raw_keyup = function() {
    update_compile_command(compiler);
  };
  compiler.raw_changed = function() {
    if (!USING_PERMLINK)
      save('wandbox.compiler.current', compiler.serialize_current());

    update_compile_command(compiler);
  };

  var stdin = new Stdin('#stdin');

  // deserialize if settings is stored in the cookie.
  var compiler_settings = $.cookie('wandbox.compiler.current');
  if (compiler_settings) {
    compiler.deserialize(compiler_settings);
    var editor_settings = $.cookie('wandbox.editor');
    if (editor_settings)
      editor.deserialize(editor_settings);
    var result_container_settings = $.cookie('wandbox.result_container');
    if (result_container_settings)
      result_container.deserialize(result_container_settings);
  } else {
    // select default compiler
    compiler.set_compiler(#{defaultCompiler});
  }

  // expand window if using permlink
  if (USING_PERMLINK) {
    editor.expand(true).change();
    result_container.expand(true).change();
  }

  // deserialize if code exists.
  var code = JSON_CODE;
  if (code != null) {
    editor.setValue(decode_uri(code.code));
    stdin.set_stdin(decode_uri(code.stdin));

    compiler.deserialize({
      compiler: decode_uri(code.compiler),
      compile_options: decode_uri(code.options),
      compiler_option_raw: decode_uri(code['compiler-option-raw']),
      runtime_option_raw: decode_uri(code['runtime-option-raw']),
    });

    result_container.set_code(compiler, decode_uri(code.code), decode_uri(code.stdin), code.outputs);
  }

  update_compile_command(compiler);

  if (USING_PERMLINK) {
    editor.focus();
  } else {
    $('#compiler').select2('open');
  }
});

