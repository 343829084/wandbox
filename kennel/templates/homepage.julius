var vim_handler = require("ace/keyboard/vim").handler
var keybindings = {
    ace: null,
    vim: vim_handler,
    emacs: "ace/keyboard/emacs",
};

var EDITOR_MODE_MAPPING = {
  'C++': 'ace/mode/c_cpp',
  'Ruby': 'ace/mode/ruby',
  'Python': 'ace/mode/python',
  'Perl': 'ace/mode/perl',
  'Erlang': 'ace/mode/erlang',
  'C#': 'ace/mode/csharp',
  'Haskell': 'ace/mode/haskell',
}
function get_editor_mode(lang) {
  return EDITOR_MODE_MAPPING[lang]
}

function decode_uri(str) {
  return decodeURIComponent(str);
}

function post_code(result_window) {
  var compiler = $('#compiler').val();
  var code = ace.edit('editor').getValue();
  var options = $("#compile_options .selected").find(':checked').map(function(n,e) { return $(e).val(); }).get();

  result_window.post_code(compiler, code, options);
}

function post_permlink(compiler, code, options) {
  var pm = $('#permlink');
  if (pm.hasClass('disable')) return;
  pm.addClass('disable');

  $.post('@{PermlinkR}', {
    compiler: compiler,
    code: code,
    options: options.join(',') },
    function(json) {
      if (!json.success) {
        $('#permlink').removeClass('disable');
        return;
      }

      $('#permlink').remove();

      var approot = '@{RootR}'
      if (approot[approot.length - 1] == '/') {
        approot = approot.substr(0, approot.length - 1);
      }
      var url = approot + '/permlink/' + json.link;
      $('<a href="' + url + '" target="_blank" id="permlink">Permlink</a>')
        .appendTo('#permdiv');
    });
}

function to_id(id) {
  return id.replace(/\./g, "\\.");
}

function update_compile_command() {
  var compiler = $('#compiler').val();
  var command = $('#compiler > option:selected').attr('command');
  var options = $('#option-' + to_id(compiler)).find(':checked').map(function(n,e) { return $(e).attr('flags'); });

  var compile_command = '$ ' + command + ' ' + options.get().join(' ');
  $('#compile_command').html('<code>' + compile_command + '</code>');

}

$(function() {
  var result_window = new ResultWindow('#output')

  $('#compile').click(function(event) {
    event.preventDefault();
    post_code(result_window);
  });

  var editor = ace.edit("editor");
  editor.setTheme("ace/theme/textmate");
  $("#keybinding").change(function() {
    var value = $(this).val();
    editor.setKeyboardHandler(keybindings[value]);
  }).change();

  editor.focus();

  editor.commands.addCommand({
    name: 'run',
    bindKey: { win: 'Ctrl-Enter',  mac: 'Ctrl-Enter' },
    exec: function(editor) {
      post_code(result_window);
    },
    readOnly: true
  });
  vim_handler.actions['ctrl-return'] = {
    fn: function(editor, range, count, param) {
      post_code(result_window);
    },
  };

  // initialize
  var compiler = decode_uri(#{urlEncode $ codeCompiler code});
  var code = decode_uri(#{urlEncode $ codeCode code});
  var check = function(elem, v) {
    v ? elem.attr('checked', '') : elem.removeAttr('checked');
  }
  $('#compiler').val(compiler);
  editor.setValue(code);
  editor.setShowPrintMargin(false);

  $("#compiler").change(function() {
    var lang = $('#compiler > option:selected').attr('language');
    console.log(lang, get_editor_mode(lang));
    editor.getSession().setMode(get_editor_mode(lang));

    $("#compile_options").children().removeClass('selected');
    $("#option-" + to_id($(this).val())).addClass('selected')
    update_compile_command();
  }).change();
  $("#compile_options input").change(function() {
    update_compile_command();
  });
});

