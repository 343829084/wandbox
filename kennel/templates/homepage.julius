var keybindings = {
    ace: null,
    vim: require("ace/keyboard/vim").handler,
    emacs: "ace/keyboard/emacs",
};

function decode_uri(str) {
  return decodeURIComponent(str);
}

function encode_html_entity(str) {
  return $.map(str, function(c) {
    if (c == ' ') return '&nbsp;';
    if (c == '<') return '&lt;';
    if (c == '>') return '&gt;';
    if (c == '&') return '&amp;';
    if (c == '"') return '&quot;';
    if (c == "'") return '&#39;';
    return c;
  }).join("");
}

function random_string(n) {
    var a = 'abcdefghijklmnopqrstuvwxyz'
    var s = '';
    for (var i = 0; i < n; i++) {
        s += a[Math.floor(Math.random() * a.length)];
    }
    return s;
}

function parse(str) {
  var index = str.indexOf(':');
  return {
    type: str.substring(0, index),
    message: str.substring(index + 1),
  };
}

var BASE_SOURCE_URL = '@{SourceR empty}'
var BASE_COMPILE_URL = '@{CompileR empty}'
var global_running = false;

function post_code() {
  if (global_running) {
    return;
  }
  var post_id = random_string(16);
  var url = BASE_SOURCE_URL + post_id;

  var src = new EventSource($.url(url).attr('path'));

  global_running = true;
  var finalize = function() {
    src.close();
    global_running = false;
  };

  src.onmessage = function(msg) {
    data = parse(decode_uri(msg.data));
    $('<p>').html(encode_html_entity(data.message))
            .addClass(data.type)
            .appendTo('#output');
    $('#output')[0].scrollTop = $('#output')[0].scrollHeight;

    if (data.type == 'Control' && data.message == 'Finish') {
        finalize();
    }
  };

  src.onopen = function() {
    var url = $('#compile').attr('href');
    var compiler = $('#compiler').val();
    var code = ace.edit('editor').getValue();
    var options = $("#compile_options .selected").find(':checked').map(function(n,e) { return $(e).val(); });

    $.post(BASE_COMPILE_URL + post_id, {
      compiler: compiler,
      code: code,
      options: options.get().join(',') }, function() { });

    // make permlink
    $('#permlink').remove();
    $('<a href="permlink" id="permlink" class="btn">Permlink</a>')
      .appendTo('#permdiv');
    $('#permlink').click(function(event) {
      event.preventDefault();
      post_permlink();
    });

  };

  src.onerror = function() {
    finalize();
  }
}

function post_permlink() {
  var pm = $('#permlink');
  if (pm.hasClass('disable')) return;
  pm.addClass('disable');

  var url = $('#compile').attr('href');
  var compiler = $('#compiler').val();
  var code = ace.edit('editor').getValue();
  var options = $("#compile_options").find(':checked').map(function(n,e) { return $(e).val(); });

  $.post('@{PermlinkR}', {
    compiler: compiler,
    code: code,
    options: options.get().join(',') },
    function(json) {
      if (!json.success) {
        $('#permlink').removeClass('disable');
        return;
      }

      $('#permlink').remove();

      var approot = '@{RootR}'
      if (approot[approot.length - 1] == '/') {
        approot = approot.substr(0, approot.length - 1);
      }
      var url = approot + '/permlink/' + json.link;
      $('<a href="' + url + '" target="_blank" id="permlink">Permlink</a>')
        .appendTo('#permdiv');
    });
}

function to_id(id) {
  return id.replace(/\./g, "\\.");
}

function update_compile_command() {
  var compiler = $('#compiler').val();
  var command = $('#compiler > option:selected').attr('command');
  var options = $('#option-' + to_id(compiler)).find(':checked').map(function(n,e) { return $(e).attr('flags'); });

  var compile_command = '$ ' + command + ' ' + options.get().join(' ');
  $('#compile_command').html('<code>' + compile_command + '</code>');

}

$(function() {
  $('#compile').click(function(event) {
    event.preventDefault();
    post_code();
  });
  $('#editor').keydown(function(event) {
    if (event.keyCode == 10 ||
        event.keyCode == 13 && event.ctrlKey) {
      event.preventDefault();
      post_code();
    }
  });

  var editor = ace.edit("editor");
  editor.setTheme("ace/theme/chrome");
  editor.getSession().setMode("ace/mode/c_cpp");
  $("#keybinding").change(function() {
        var value = $(this).val();
        editor.setKeyboardHandler(keybindings[value]);
  }).change();

  editor.focus();

  // initialize
  var compiler = decode_uri('#{urlEncode $ codeCompiler code}');
  var code = decode_uri('#{urlEncode $ codeCode code}');
  var check = function(elem, v) {
    v ? elem.attr('checked', '') : elem.removeAttr('checked');
  }
  $('#compiler').val(compiler);
  editor.setValue(code);
  editor.setShowPrintMargin(false);

  $("#compiler").change(function() {
    $("#compile_options").children().removeClass('selected');
    $("#option-" + to_id($(this).val())).addClass('selected')
    update_compile_command();
  }).change();
  $("#compile_options input").change(function() {
    update_compile_command();
  });
});

