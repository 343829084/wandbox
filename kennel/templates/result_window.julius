function parse(str) {
  var index = str.indexOf(':');
  return {
    type: str.substring(0, index),
    message: str.substring(index + 1),
  };
}

function random_string(n) {
    var a = 'abcdefghijklmnopqrstuvwxyz'
    var s = '';
    for (var i = 0; i < n; i++) {
        s += a[Math.floor(Math.random() * a.length)];
    }
    return s;
}

var BASE_SOURCE_URL = '@{EmptySourceR}'
var BASE_COMPILE_URL = '@{EmptyCompileR}'

function ResultWindow(id) {
  this.id = id;
  $(this.id).empty();
  var permlink = $('<div class="row-fluid permlink"></div>');
  var code = $('<div class="row-fluid code-window"></div>');
  var output = $('<div class="row-fluid output-window"></div>');
  $(this.id).append(permlink);
  $(this.id).append(code);
  $(this.id).append(output);
}

ResultWindow.prototype._permlink = function() {
  return $(this.id).find('.permlink');
}
ResultWindow.prototype._code_window = function() {
  return $(this.id).find('.code-window');
}
ResultWindow.prototype._output_window = function() {
  return $(this.id).find('.output-window');
}

ResultWindow.prototype.permlink = function(compiler, code, outputs) {
  var self = this;

  var a = $('<a href="#" class="btn">Share This Code</a>')
    .appendTo(this._permlink());
  a.click(function(event) {
    event.preventDefault();
    self.post_permlink(compiler, code, outputs);
  });
}

ResultWindow.prototype.post_permlink = function(compiler, code, outputs) {
  var self = this;

  var pm = this._permlink().find('a');
  if (pm.hasClass('disable')) return;
  pm.addClass('disable');

  var selected_compiler = compiler.get_selected_compiler();
  var compile_options = compiler.get_checked_compile_options().map(function(n,e) { return $(e).val(); }).get().join(',');
  var str_outputs = $.map(outputs, function(e) {
    return e.type + ',' + e.output;
  });

  $.post('@{PermlinkR}', {
    compiler: selected_compiler,
    code: code,
    options: compile_options,
    outputs: str_outputs },
    function(json) {
      if (!json.success) {
        pm.removeClass('disable');
        return;
      }

      pm.remove();

      var approot = '@{RootR}'
      if (approot[approot.length - 1] == '/') {
        approot = approot.substr(0, approot.length - 1);
      }
      var url = approot + '/permlink/' + json.link;
      $('<a href="' + url + '" target="_blank" id="permlink">URL</a>')
        .appendTo(self._permlink());

      var div = $('<div></div>').appendTo(self._permlink());
      twttr.widgets.createShareButton(
        url,
        div[0],
        function() { },
        {
          count: 'none',
          //text: 'wandbox'
        });
    });
}

ResultWindow.prototype.code_window = function(compiler, code) {
  var show_code = $('<div><code><a href="#">Show Code</a></code></div>');
  var hide_code = $('<div><code><a href="#">Hide Code</a></code></div>');
  var pre = $('<div><pre></pre></div>');
  pre.find('pre').text(code);

  var compiler_data = (function(compiler) {
    var e = compiler.get_selected_compiler_element();
    var data = e.html();
    return $('<div><p>' + data + '</p></div>');
  })(compiler);

  var code = (function(compiler) {
    var command = compiler.get_selected_compiler_element().attr('data-command');
    var compile_options = compiler.get_checked_compile_options().map(function(n,e) { return $(e).attr('data-flags'); });

    var compile_command = '$ ' + command + ' ' + compile_options.get().join(' ');
    return $('<code>' + compile_command + '</code>');
  })(compiler);

  hide_code.toggle(false);
  compiler_data.toggle(false);
  pre.toggle(false);
  code.toggle(false);

  var toggle_func = function(event) {
    event.preventDefault();
    show_code.toggle();
    hide_code.toggle();
    compiler_data.toggle();
    pre.toggle();
    code.toggle();
  };
  show_code.click(toggle_func);
  hide_code.click(toggle_func);

  this._code_window().append(show_code);
  this._code_window().append(hide_code);
  this._code_window().append(compiler_data);
  this._code_window().append(code);
  this._code_window().append(pre);
}

ResultWindow.prototype.post_code = function(compiler, code) {
  var self = this;

  var post_id = random_string(16);
  var url = BASE_SOURCE_URL + '/' + post_id;

  var src = new EventSource($.url(url).attr('path'));

  this.code_window(compiler, code);

  var finalize = function() {
    src.close();

    $('#stdin-editor').prop('sendstdin', null);

    var outputs = self._output_window().find('p').map(function(n,e) {
        return { 'type': $(e).attr('data-type'), 'output': $(e).text() };
    });
    self.permlink(compiler, code, outputs);

    if (self.onfinish)
      self.onfinish();
  };

  var preview_paragraph = null;
  src.onmessage = function(msg) {
    var output = self._output_window()

    var data = parse(decode_uri(msg.data));
    var is_message = function(type) {
      return data.type == "CompilerMessageS" ||
             data.type == "CompilerMessageE" ||
             data.type == "StdOut" ||
             data.type == "StdErr";
    };
    if (is_message(data.type) &&
        preview_paragraph &&
        preview_paragraph.hasClass(data.type)) {
      var p = preview_paragraph;
      p.text(p.text() + data.message)
    } else {
      var p = $('<p>').addClass(data.type)
                      .attr('data-type', data.type)
                      .text(data.message)
                      .appendTo(output);
      preview_paragraph = p;
    }
    output[0].scrollTop = output[0].scrollHeight;

    if (data.type == 'Control' && data.message == 'Finish') {
        finalize();
    }
  };

  var selected_compiler = compiler.get_selected_compiler();
  var compile_options = compiler.get_checked_compile_options().map(function(n,e) { return $(e).val(); }).get().join(',');

  src.onopen = function() {
    var url = BASE_COMPILE_URL + '/' + post_id;
    $.post(url, {
      compiler: selected_compiler,
      code: code,
      options: compile_options }, function() { });
  };

  src.onerror = function() {
    finalize();
  }

  $('#stdin-editor').prop('sendstdin', function(i,p) { return function(text) {
    // ここでテキストを送信したい
    var output = self._output_window();
    if (preview_paragraph &&
        preview_paragraph.hasClass('StdIn')) {
      var p = preview_paragraph;
      p.text(p.text() + text);
    } else {
      var p = $('<p>').addClass('StdIn')
                      .attr('data-type', 'StdIn')
                      .text(text)
                      .appendTo(output);
      preview_paragraph = p;
    }
    output[0].scrollTop = output[0].scrollHeight;
  }});
}

ResultWindow.prototype.set_code = function(compiler, code, outputs) {
  var self = this;
  this.code_window(compiler, code);
  $.each(outputs, function(n,e) {
    var type = decode_uri(e.type);
    var output = decode_uri(e.output);
    $('<p>').addClass(type)
            .attr('data-type', type)
            .text(output)
            .appendTo(self._output_window());
  });
}
